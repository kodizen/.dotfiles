#
# weechat -- trigger.conf
#
# WARNING: It is NOT recommended to edit this file by hand,
# especially if WeeChat is running.
#
# Use commands like /set or /fset to change settings in WeeChat.
#
# For more info, see: https://weechat.org/doc/weechat/quickstart/
#

[look]
enabled = on
monitor_strip_colors = off

[color]
flag_command = lightgreen
flag_conditions = yellow
flag_post_action = lightblue
flag_regex = lightcyan
flag_return_code = lightmagenta
identifier = cyan
regex = white
replace = cyan

[trigger]
beep.arguments = ""
beep.command = "/print -beep"
beep.conditions = "${tg_displayed} && ${tg_tags} !!- ,notify_none, && (${tg_highlight} || ${tg_msg_pv}) && ${buffer.notify} > 0"
beep.enabled = on
beep.hook = print
beep.post_action = none
beep.regex = ""
beep.return_code = ok
buflist_buffer_scroll.arguments = "buflist_buffer_scroll"
buflist_buffer_scroll.command = "/mute /set weechat.buffer.${full_name}.localvar_set_start_at ${my_start_at}"
buflist_buffer_scroll.conditions = "${_key} =~ -wheeldown$ || ${buffer[${pointer}].local_variables.start_at} !="
buflist_buffer_scroll.enabled = on
buflist_buffer_scroll.hook = hsignal
buflist_buffer_scroll.post_action = none
buflist_buffer_scroll.regex = "/.*/${if:${buffer[${pointer}].local_variables.start_at}==?0:${buffer[${pointer}].local_variables.start_at}}/my_start_at /.*/${calc:${my_start_at}${if:${_key}=~up&&${my_start_at}!=?-:+}1}/my_start_at"
buflist_buffer_scroll.return_code = ok
buflist_fold_symbol_click.arguments = "1001|buflist_mouse"
buflist_fold_symbol_click.command = "/mute /toggle weechat.buffer.${full_name}.localvar_set_fold 1 ''"
buflist_fold_symbol_click.conditions = "${localvar_type} == server && ${plugins.var.buflist.item.fold} != && (${plugins.var.buflist.item.buffer_number} != && ${_bar_item_col} == ${lengthscr:${buffer[last_gui_buffer].number}.} || ${plugins.var.buflist.item.buffer_number} == && ${_bar_item_col} == 0)"
buflist_fold_symbol_click.enabled = on
buflist_fold_symbol_click.hook = hsignal
buflist_fold_symbol_click.post_action = none
buflist_fold_symbol_click.regex = ""
buflist_fold_symbol_click.return_code = ok_eat
buflist_refresh_options.arguments = "weechat.bar.buflist.size*;plugins.var.buflist.*"
buflist_refresh_options.command = "/buflist refresh"
buflist_refresh_options.conditions = ""
buflist_refresh_options.enabled = on
buflist_refresh_options.hook = config
buflist_refresh_options.post_action = none
buflist_refresh_options.regex = ""
buflist_refresh_options.return_code = ok
buflist_resize.arguments = "buflist_resize"
buflist_resize.command = "/mute /set plugins.var.buflist.section.${my_modified_section}.size ${my_modified_section_size};/bar set ${_bar_name} size ${my_new_bar_size}"
buflist_resize.conditions = "${_key}=~down || ${_key}=~up && (${_bar_item_col} < ${plugins.var.buflist.section.left.size} && ${plugins.var.buflist.section.left.size} > 1 || ${_bar_item_col} >= ${plugins.var.buflist.section.left.size} && ${plugins.var.buflist.section.right.size} > 1)"
buflist_resize.enabled = on
buflist_resize.hook = hsignal
buflist_resize.post_action = none
buflist_resize.regex = "/.*/${if:${_key}=~up$?-:+}/my_action /.*/${if:${_bar_item_col}<${plugins.var.buflist.section.left.size}?left:right}/my_modified_section /.*/${calc:${plugins.var.buflist.section.${my_modified_section}.size} ${my_action} 1}/my_modified_section_size /.*/${if:${weechat.bar.${_bar_name}.size}!=?${calc:${weechat.bar.${_bar_name}.size} ${my_action} 1}:0}/my_new_bar_size"
buflist_resize.return_code = ok
buflist_tools.arguments = "buflist_tools;manage pascalpoitras's custom buflist (https://gist.github.com/pascalpoitras/8406501);resize <buflist_size> <left_size>|? [<right_size>] || hide|show|itoggle|showonly|hideonly <item>|-all [<item>|-all...] || enable|disable|toggle <feature> [<feature>...];       resize: resize the buflist size and the two sections${\n}         hide: hide one or more item(s)${\n}         show: show one or more item(s)${\n}      itoggle: toggle one or more item(s)${\n}     showonly: hide all items except...${\n}     hideonly: show all items except...${\n}       enable: enable a feature that change the behavior of the buflist${\n}      disable: disable a feature that change the behavior of the buflist${\n}       toggle: toggle a feature that change the behavior of the buflist${\n} buflist_size: new size for the buflist${\n}    left_size: size of left section${\n}   right_size: size of right section${\n}         item: an item (buffer_number, fold, indent, nick_prefix, buffer_name, lag, filter, relay_count, extra, hotlist)${\n}         -all: do action on all items${\n}      feature: a feature (indent_tree, real_net_name, show_hidden_buffers)${\n}${\n}The buflist is composed of two sections. The left section is composed of nine items. The buffer number, the fold symbol (servers only), the indentation, the nick prefix (channels only), the buffer name, the lag (servers only), the filter (on some buffer like fset, scripts...), the relay count (for the relay buffer) and extra infos about a buffer. The right section is only composed of hotlist. The two sections can be resized independently.${\n}${\n}Exemples:${\n}  Resize the bar to 20 with the size 15 for left section and 5 for right section:${\n}    /buflist_tools resize 20 15;resize 20 15 || show|hide|itoggle|hideonly|showonly buffer_number|fold|indent|nick_prefix|buffer_name|lag|filter|relay_count|extra|hotlist|-all|%* || enable|disable|toggle indent_tree|real_net_name|show_hidden_buffers|%*"
buflist_tools.command = "/command -buffer core.weechat * /eval -s ${my_cmds_to_run}"
buflist_tools.conditions = "${tg_argv_eol1} =~ ^resize +[0-9]+ +([0-9]+( +[0-9]+)?|\? +[0-9]+)$ || ${tg_argv_eol1} =~ ^(hide|show|itoggle|showonly|hideonly) +(([[:alnum:]_]+|-all)( +|$))+$ || ${tg_argv_eol1} =~ ^(enable|disable|toggle) +([[:alnum:]_]+( +|$))+$"
buflist_tools.enabled = on
buflist_tools.hook = command
buflist_tools.post_action = none
buflist_tools.regex = "/.*/${tg_argv1}/my_action /.*/${if:${my_action}==resize?${tg_argv_eol2}}/my_resize_cmds ===^([^ ]+) +([^ ]+)( +([^ ]+))?$===${define:my_buflist_size,${re:1}}${define:my_left_size,${re:2}}${define:my_right_size,${re:4}}/mute /set plugins.var.buflist.section.left.size ${if:${my_left_size}=~[0-9]+?${my_left_size}:${calc:${my_buflist_size}-${my_right_size}}};/mute /set plugins.var.buflist.section.right.size ${if:${my_right_size}=~[0-9]+?${my_right_size}:${calc:${my_buflist_size}-${my_left_size}}};/bar set buflist size ${my_buflist_size}===my_resize_cmds /.*/${if:${my_action}=~^(hide|show|itoggle|showonly|hideonly)$?${tg_argv_eol2}}/my_item_cmds /.*/buffer_number fold indent nick_prefix buffer_name lag filter relay_count extra hotlist/my_items /-all/${my_items}/my_item_cmds /.*/${if:${my_action}=~^(hide|show)only$?${my_items}}/my_hide_or_show_everything ===[^ ]+===/mute /set plugins.var.buflist.item.${re:0} ${if:${my_action}==hideonly};===my_hide_or_show_everything ===[^ ]+===/mute /set plugins.var.buflist.item.${re:0} ${if:${my_action}=~^hide?0:${if:${my_action}=~^show?1:\x5c${if:\x5c${plugins.var.buflist.item.${re:0}${\x5cx7d}?0:1${\x5cx7d}}};===my_item_cmds /.*/${my_hide_or_show_everything}${re:0}/my_item_cmds /.*/${if:${my_action}=~^(enable|disable|toggle)$?${tg_argv_eol2}}/my_look_cmds ===[^ ]+===/mute /set plugins.var.buflist.look.${re:0} ${if:${my_action}==disable?0:${if:${my_action}==enable?1:${if:${plugins.var.buflist.look.${re:0}}!=?0:1}}};===my_look_cmds /.*/${my_resize_cmds}${my_item_cmds}${my_look_cmds}/my_cmds_to_run"
buflist_tools.return_code = ok
chanmon_monitor.arguments = "*;irc_privmsg,matrix_message,matrix_text"
chanmon_monitor.command = "/print -newbuffer ${my_monitor} -tags ${my_tags} \t${my_message}"
chanmon_monitor.conditions = "${buffer.local_variables.type} == channel && ${buffer.local_variables.no_chanmon_like} == && (${plugins.var.group_tools.chanmon.all.general.allow_filtered_lines} != || ${tg_displayed} !=) && (${plugins.var.group_tools.chanmon.all.general.allow_hidden_channels} != || ${buffer.hidden} ==)"
chanmon_monitor.enabled = on
chanmon_monitor.hook = print
chanmon_monitor.post_action = none
chanmon_monitor.regex = "/.*/${split:1,_,,${tg_trigger_name}}/my_monitor /.*/${plugins.var.group_tools.${my_monitor}.list.header.list}/my_list /[^,]+/${if:${re:0}=~^[abcdefghijklmnopqrstuvwxyz0-9_]+$?${re:0}}/my_list /[^,]+/plugins.var.group_tools.${my_monitor}.item.${re:0}/my_list /[^,]+/${if:${length:${${re:0}.conditions}}==||${eval_cond:${${re:0}.conditions}}?${re:0}}/my_list /,+/,/my_list /^,|,$//my_list /.*/${my_list}/my_bgs /[^,]+/${base_encode:16,${eval:${${re:0}.bg}}}/my_bgs /$/,${base_encode:16,default}/my_bgs /([^,]+)(,|$)/${define:my_fg,${eval:${${re:1}.fg}}}${define:my_bg,${base_decode:16,${split:${re:repl_index},,,${my_bgs}}}}${define:my_separator,${eval:${${re:1}.separator}}}${define:my_min_length,${eval:${${re:1}.min_length}}}${define:my_max_length,${eval:${${re:1}.max_length}}}${define:my_content,${eval:${${re:1}.content}}}${define:my_next_bg,${base_decode:16,${split:${calc:${re:repl_index}+1},,,${my_bgs}}}}${color:${my_fg},${my_bg}} ${cutscr:+${if:${split:1,0,keep_eol+strip_left,${my_max_length}}!~^[1-9][0-9]*$?${calc:${lengthscr:${my_content}}+1}:${my_max_length}},…,${my_content}}${repeat:${calc:${my_min_length}-${lengthscr:${my_content}}}, }${color:${my_fg},${my_bg}} ${if:${plugins.var.group_tools.${my_monitor}.all.general.powerline}!=?${if:${color:${my_bg}}==${color:${my_next_bg}}?${color:${my_separator}}:${color:${my_bg},${my_next_bg}}${color:reset}}:${color:reset} }/my_list /.+/${re:0} /my_list /.*/${tg_tags}/my_tags / //my_tags /.*/${my_list}${tg_message}/my_message"
chanmon_monitor.return_code = ok
cmd_pass.arguments = "5000|input_text_display;5000|history_add;5000|irc_command_auth"
cmd_pass.command = ""
cmd_pass.conditions = ""
cmd_pass.enabled = on
cmd_pass.hook = modifier
cmd_pass.post_action = none
cmd_pass.regex = "s==^((/(msg|m|quote) +(-server +[^ \n]+ +)?nickserv +(id|identify|set +password|ghost +[^ \n]+|release +[^ \n]+|regain +[^ \n]+|recover +[^ \n]+|setpass +[^ \n]+) +)|/oper +[^ \n]+ +|/quote +pass +|/secure +(passphrase|decrypt|set +[^ \n]+) +)([^\n]*)==${re:1}${hide:*,${re:+}}"
cmd_pass.return_code = ok
cmd_pass_register.arguments = "5000|input_text_display;5000|history_add;5000|irc_command_auth"
cmd_pass_register.command = ""
cmd_pass_register.conditions = ""
cmd_pass_register.enabled = on
cmd_pass_register.hook = modifier
cmd_pass_register.post_action = none
cmd_pass_register.regex = "s==^(/(msg|m|quote) +(-server +[^ \n]+ +)?nickserv +register +)([^ \n]+)([^\n]*)==${re:1}${hide:*,${re:4}}${re:5}"
cmd_pass_register.return_code = ok
control_buffers_change_control_window.arguments = "plugins.var.control_buffers_window;plugins.var.control_buffers2_window"
control_buffers_change_control_window.command = "/window refresh"
control_buffers_change_control_window.conditions = ""
control_buffers_change_control_window.enabled = on
control_buffers_change_control_window.hook = config
control_buffers_change_control_window.post_action = none
control_buffers_change_control_window.regex = ""
control_buffers_change_control_window.return_code = ok
group_tools.arguments = "group_tools;manage groups of options;set <group>,[<group>...] <namespace> <section>,[<section>...] <option>,[<option>...] <value> || add <group>,[<group>...] <item> ${\x22}[<option>,[<option>...]]${\x22} ${\x22}[<value>]${\x22} [${\x22}[<value>]${\x22}...] || del <group>,[<group>...] <item> [<item>...] || clear <group>,[<group>...] <list>,[<list>...] || push|push_if_not|remove|content <group>,[<group>...] <list>,[<list>...] <item> [<item>...];        set: change the value of one or more options of one or more sections${\n}        add: add a new item${\n}        del: delete one or more items${\n}      clear: clear a list${\n}       push: put one or more items at the end of a list${\n}push_if_not: put one or more items at the end of a list if not already in the list${\n}     remove: remove one or more items in a list${\n}    content: replace a list${\n}      group: a group${\n}  namespace: a namespace${\n}    section: a section${\n}     option: an option${\n}      value: a value for an option${\n}       item: name of an item${\n}       list: a list${\n}${\n}Create or update an item named nick in the chanmon group and put the item at the end of the header list:${\n}${\n}   /${tg_trigger_name} add chanmon nick ${\x22}${\x22} ${\x22}5${\x22} ${\x22}5${\x22} ${\x22}white${\x22} ${\x22}24${\x22} ${\x22}black${\x22} ${\x22}${raw:${tg_tag_nick}}${\x22}${\n}${\n}The first 5 will end up in the option named 1, the second 5 will end up in the option named 2 and so on. These names of options are not really useful, to give them a name:${\n}${\n}   /${tg_trigger_name} clear chanmon header${\n}   /${tg_trigger_name} add chanmon header nick min_length,max_length,fg,bg,separator,content 5 5 white 24 black ${raw:${tg_tag_nick}}${\n}${\n}now the first 5 will end up in min_length, the second 5 will end up in max_length and so on. It's tedious to repeat the options names everytime. You can give the defaults name just once:${\n}${\n}   /${tg_trigger_name} clear chanmon header${\n}   /${tg_trigger_name} set chanmon all general defaults_options min_length,max_length,fg,bg,separator,content${\n}   /${tg_trigger_name} add chanmon header nick push ${\x22}${\x22} 5 5 white 24 black ${raw:${tg_tag_nick}};set|add|del|clear|push|push_if_not|remove|content"
group_tools.command = "/command -buffer core.weechat * /eval -s ${my_cmds_to_run}"
group_tools.conditions = "${define:my_regex,[abcdefghijklmnopqrstuvwxyz0-9_]+}${tg_argv_eol1} =~ (?-i)^set +(${my_regex},?)+ +${my_regex} +(${my_regex},?)+ +(${my_regex},?)+ . || ${tg_argv_eol1} =~ (?-i)^add +(${my_regex},?)+ +${my_regex} . && ${tg_shell_argc} > 5 || ${tg_argv_eol1} =~ (?-i)^del +(${my_regex},?)+ +(${my_regex} *)+$ || ${tg_argv_eol1} =~ (?-i)^clear +(${my_regex},?)+ +(${my_regex},?)+$ || ${tg_argv_eol1} =~ (?-i)^(content|push|push_if_not|remove) +(${my_regex},?)+ +(${my_regex},?)+ +(${my_regex} *)+$"
group_tools.enabled = on
group_tools.hook = command
group_tools.post_action = none
group_tools.regex = "/.*/${tg_argv1}/my_action /.*/${if:${my_action}=~^(add|del|set)$?item:list}/my_action_type /.*/${tg_argv2}/my_groups /.*/${if:${my_action_type}==list?${tg_argv3}}/my_lists /.*/${if:${my_action_type}==item?${my_groups},}/my_group_tools_item_cmds ===([^,]+),===${define:my_group,${re:1}}/group_tools_item ${my_action} ${my_group} \${base_decode:16,${base_encode:16,${tg_argv_eol3}}};===my_group_tools_item_cmds /$/${my_group_tools_item_cmds}/my_cmds_to_run /.*/${if:${my_action_type}==list?${my_groups},}/my_group_tools_list_cmds /.*/${if:${my_action_type}==list?${my_lists},}/my_lists /.*/${if:${my_action_type}==list?${split:count,,strip_right,${my_groups}}}/my_number_of_groups /.*/${if:${my_action_type}==list?${split:count,,strip_right,${my_lists}}}/my_number_of_lists /[^,]+,/${repeat:${my_number_of_lists},${re:0}}/my_group_tools_list_cmds /.+/${repeat:${my_number_of_groups},${re:0}}/my_lists ===([^,]+),===${define:my_group,${re:1}}${define:my_list,${split:${re:repl_index},,,${my_lists}}}/group_tools_list ${my_action} ${my_group} ${my_list} ${tg_argv_eol4};===my_group_tools_list_cmds /$/${my_group_tools_list_cmds}/my_cmds_to_run"
group_tools.return_code = ok
group_tools_item.arguments = "group_tools_item;manage the items of a group;set <group> <namespace> <section>,[<section>...] <option>,[<option>...] <value> || add <group> <item> ${\x22}[<option>,[<option>...]]${\x22} ${\x22}[<value>]${\x22} [${\x22}[<value>]${\x22}...] || del <group> <item> [<item>...];      set: change the value of one or more options of one or more sections${\n}      add: add a new item${\n}      del: delete one or more items${\n}    group: a group${\n}namespace: a namespace${\n}  section: a section${\n}   option: an option${\n}    value: a value for an option${\n}     item: name of an item${\n}${\n}Add or replace an item named nick in the chanmon group:${\n}${\n}   /${tg_trigger_name} add chanmon nick ${\x22}${\x22} ${\x22}5${\x22} ${\x22}5${\x22} ${\x22}white${\x22} ${\x22}24${\x22} ${\x22}black${\x22} ${\x22}${raw:${tg_tag_nick}}${\x22}${\n}${\n}The first 5 will end up in the option named 1, the second 5 will end up in the option named 2 and so on. These names of options are not really useful, to give them a name:${\n}${\n}   /${tg_trigger_name} del chanmon nick${\n}   /${tg_trigger_name} add chanmon nick ${\x22}min_length,max_length,fg,bg,separator,content${\x22} ${\x22}5${\x22} ${\x22}5${\x22} ${\x22}white${\x22} ${\x22}24${\x22} ${\x22}black${\x22} ${\x22}${raw:${tg_tag_nick}}${\x22}${\n}${\n}now the first 5 will end up in min_length, the second 5 will end up in max_length and so on. It's tedious to repeat the options names everytime. You can give the defaults name just once:${\n}${\n}   /${tg_trigger_name} del chanmon nick${\n}   /${tg_trigger_name} set chanmon all general defaults_options min_length,max_length,fg,bg,separator,content${\n}   /${tg_trigger_name} add chanmon nick ${\x22}${\x22} ${\x22}5${\x22} ${\x22}5${\x22} ${\x22}white${\x22} ${\x22}24${\x22} ${\x22}black${\x22} ${\x22}${raw:${tg_tag_nick}}${\x22};set|add|del"
group_tools_item.command = "/command -buffer core.weechat * /eval -s ${my_cmds_to_run}"
group_tools_item.conditions = "${define:my_regex,[abcdefghijklmnopqrstuvwxyz0-9_]+}${tg_argv_eol1} =~ (?-i)^set +${my_regex} +${my_regex} +(${my_regex},?)+ +(${my_regex},?)+ . || ${tg_argv_eol1} =~ (?-i)^add +${my_regex} +${my_regex} . && ${tg_shell_argc} > 5 || ${tg_argv_eol1} =~ (?-i)^del +${my_regex} +(${my_regex} *)+$"
group_tools_item.enabled = on
group_tools_item.hook = command
group_tools_item.post_action = none
group_tools_item.regex = "/.*/${tg_argv1}/my_action /.*/${tg_argv2}/my_group /.*/${if:${my_action}==set?${tg_argv3}}/my_namespace /.*/plugins.var.group_tools.${my_group}/my_opt_prefix /.*/${if:${my_action}==add?${tg_argv3}:${if:${my_action}==del?${tg_argv_eol3}}}/my_items / +/,/my_items /.*/${if:${my_action}==set?${tg_argv4}}/my_sections /[^,]$/${re:0},/my_sections /.*/${if:${my_action}==set?${tg_argv5}}/my_options /[^,]$/${re:0},/my_options /.*/${if:${my_action}==set?${split:count,,strip_right,${my_sections}}}/my_number_of_sections /.*/${if:${my_action}==set?${split:count,,strip_right,${my_options}}}/my_number_of_options /[^,]+,/${repeat:${my_number_of_options},${re:0}}/my_sections /.+/${repeat:${my_number_of_sections},${re:0}}/my_options ===([^,]+),===${define:my_option,${split:${re:repl_index},,,${my_options}}}/mute -core /set ${my_opt_prefix}.${my_namespace}.${re:1}.${my_option} \${base_decode:16,${base_encode:16,${tg_argv_eol6}}};===my_sections /$/${my_sections}/my_cmds_to_run /.*/${if:${my_action}==add?${repeat:${calc:${tg_shell_argc}-5},,}}/my_add_cmds ===,===${define:my_option,${if:${split:${re:repl_index},,,${tg_shell_argv4}}=~^[abcdefghijklmnopqrstuvwxyz0-9_]+$?${split:${re:repl_index},,,${tg_shell_argv4}}:${if:${split:${re:repl_index},,,${${my_opt_prefix}.all.general.defaults_options}}=~^[abcdefghijklmnopqrstuvwxyz0-9_]+$?${split:${re:repl_index},,,${${my_opt_prefix}.all.general.defaults_options}}:${re:repl_index}}}}/mute -core /set ${my_opt_prefix}.item.${my_items}.${my_option} '\${base_decode:16,${base_encode:16,${tg_shell_argv${calc:4+${re:repl_index}}}}}';===my_add_cmds /$/${my_add_cmds}/my_cmds_to_run /.*/${if:${my_action}==del?${my_items}}/my_del_cmds ===([^,]+),?===/mute -core /unset -mask ${my_opt_prefix}.item.${re:1}.*;===my_del_cmds /$/${my_del_cmds}/my_cmds_to_run"
group_tools_item.return_code = ok
group_tools_list.arguments = "group_tools_list;manage the list of a group;clear <group> || push|push_if_not|remove|content <group> <item> [<item>...];      clear: clear a list${\n}       push: put one or more items at the end of a list${\n}push_if_not: put one or more items at the end of a list if not already in the list${\n}     remove: remove one or more items in a list${\n}    content: replace a list${\n}      group: a group${\n}       item: name of an item${\n}${\n}Push an item at the end of the list only if this item is not already part of the list:${\n}${\n}   /${tg_trigger_name} push_if_not chanmon nick${\n}${\n}Push two items at the end of the list even if they might already be present:${\n}${\n}   /${tg_trigger_name} push chanmon chan nick;content|clear|push|push_if_not|remove"
group_tools_list.command = "/command -buffer core.weechat * /eval -s ${my_cmds_to_run}"
group_tools_list.conditions = "${tg_argv_eol1} =~ (?-i)^clear +[abcdefghijklmnopqrstuvwxyz0-9_]+ +[abcdefghijklmnopqrstuvwxyz0-9_]+$ || ${tg_argv_eol1} =~ (?-i)^(content|push|push_if_not|remove) +[abcdefghijklmnopqrstuvwxyz0-9_]+ +[abcdefghijklmnopqrstuvwxyz0-9_]+ +([abcdefghijklmnopqrstuvwxyz0-9_]+ *)+$"
group_tools_list.enabled = on
group_tools_list.hook = command
group_tools_list.post_action = none
group_tools_list.regex = "/.*/${tg_argv1}/my_action /.*/${tg_argv2}/my_group /.*/${tg_argv3}/my_list_name /.*/plugins.var.group_tools.${my_group}/my_opt_prefix /.*/${${my_opt_prefix}.list.${my_list_name}.list}/my_list /[^,]+/${if:${re:0}=~^[abcdefghijklmnopqrstuvwxyz0-9_]+$?${re:0}}/my_list /.*/${tg_argv_eol4}/my_items / +/,/my_items /.*/${if:${my_action}==push_if_not?${my_items}}/my_push_if_not_items /[^,]+/${if:,${my_list},!-,${re:0},&&,${split:${calc:${re:repl_index}+1},,keep_eol,${my_items}},!-,${re:0},?${re:0}}/my_push_if_not_items /.*/${if:${my_action}==remove?${my_list}}/my_remove_items /[^,]+/${if:,${my_items},!-,${re:0},?${re:0}}/my_remove_items /.*/${if:${my_action}==push_if_not?${my_push_if_not_items}:${if:${my_action}==remove?${my_remove_items}:${re:0}}}/my_items /,+/,/my_items /^,|,$//my_items /.*/${if:${my_action}=~^(content|remove)$?${my_items}:${if:${my_action}=~^push?${re:0},${my_items}}}/my_list /,+/,/my_list /^,|,$//my_list ===$===/mute -core /set ${my_opt_prefix}.list.${my_list_name}.list '${my_list}';===my_cmds_to_run"
group_tools_list.return_code = ok
highmon_monitor.arguments = "*;irc_privmsg,matrix_message,matrix_text"
highmon_monitor.command = "/print -newbuffer ${my_monitor} -tags ${my_tags} \t${my_message}"
highmon_monitor.conditions = "${tg_highlight} == 1 && ${buffer.local_variables.type} == channel && ${buffer.local_variables.no_highmon_like} == && (${plugins.var.group_tools.highmon.all.general.allow_filtered_lines} != || ${tg_displayed} !=) && (${plugins.var.group_tools.highmon.all.general.allow_hidden_channels} != || ${buffer.hidden} ==)"
highmon_monitor.enabled = on
highmon_monitor.hook = print
highmon_monitor.post_action = none
highmon_monitor.regex = "/.*/${split:1,_,,${tg_trigger_name}}/my_monitor /.*/${plugins.var.group_tools.${my_monitor}.list.header.list}/my_list /[^,]+/${if:${re:0}=~^[abcdefghijklmnopqrstuvwxyz0-9_]+$?${re:0}}/my_list /[^,]+/plugins.var.group_tools.${my_monitor}.item.${re:0}/my_list /[^,]+/${if:${length:${${re:0}.conditions}}==||${eval_cond:${${re:0}.conditions}}?${re:0}}/my_list /,+/,/my_list /^,|,$//my_list /.*/${my_list}/my_bgs /[^,]+/${base_encode:16,${eval:${${re:0}.bg}}}/my_bgs /$/,${base_encode:16,default}/my_bgs /([^,]+)(,|$)/${define:my_fg,${eval:${${re:1}.fg}}}${define:my_bg,${base_decode:16,${split:${re:repl_index},,,${my_bgs}}}}${define:my_separator,${eval:${${re:1}.separator}}}${define:my_min_length,${eval:${${re:1}.min_length}}}${define:my_max_length,${eval:${${re:1}.max_length}}}${define:my_content,${eval:${${re:1}.content}}}${define:my_next_bg,${base_decode:16,${split:${calc:${re:repl_index}+1},,,${my_bgs}}}}${color:${my_fg},${my_bg}} ${cutscr:+${if:${split:1,0,keep_eol+strip_left,${my_max_length}}!~^[1-9][0-9]*$?${calc:${lengthscr:${my_content}}+1}:${my_max_length}},…,${my_content}}${repeat:${calc:${my_min_length}-${lengthscr:${my_content}}}, }${color:${my_fg},${my_bg}} ${if:${plugins.var.group_tools.${my_monitor}.all.general.powerline}!=?${if:${color:${my_bg}}==${color:${my_next_bg}}?${color:${my_separator}}:${color:${my_bg},${my_next_bg}}${color:reset}}:${color:reset} }/my_list /.+/${re:0} /my_list /.*/${tg_tags}/my_tags / //my_tags /.*/${my_list}${tg_message}/my_message"
highmon_monitor.return_code = ok
msg_auth.arguments = "5000|irc_message_auth"
msg_auth.command = ""
msg_auth.conditions = ""
msg_auth.enabled = on
msg_auth.hook = modifier
msg_auth.post_action = none
msg_auth.regex = "s==^(.*(id|identify|set +password|register|ghost +[^ ]+|release +[^ ]+|regain +[^ ]+|recover +[^ ]+) +)(.*)==${re:1}${hide:*,${re:+}}"
msg_auth.return_code = ok
newsmon_add_site_info_tags.arguments = "formatted;irc.libera.##news;irc_privmsg,matrix_message,matrix_text,debug_newsmon"
newsmon_add_site_info_tags.command = ""
newsmon_add_site_info_tags.conditions = "${tg_message_nocolor} =~ ^\[[^]|]+\] +[^ ].* +→ +https?://[^ ]+$"
newsmon_add_site_info_tags.enabled = on
newsmon_add_site_info_tags.hook = line
newsmon_add_site_info_tags.post_action = none
newsmon_add_site_info_tags.regex = "/.*/${lower:${info:news_parse,site_and_sections,${tg_message_nocolor}}}/my_site_and_sections /.*/site_name,site_first_section,site_second_section/my_news_tags /[^,]+/${re:0}_${base_encode:16,${split:${re:repl_index},|,,${my_site_and_sections}}}/my_news_tags /$/${my_news_tags},/tags /\|/ - /my_site_and_sections /$/site_and_sections_${base_encode:16,${my_site_and_sections}},site_title_${base_encode:16,${lower:${info:news_parse,title,${tg_message_nocolor}}}},site_url_${base_encode:16,${info:news_parse,url,${tg_message_nocolor}}},/tags"
newsmon_add_site_info_tags.return_code = ok
newsmon_filter_rebuild.arguments = "plugins.var.group_tools.newsmon_interest.list.news.list;plugins.var.group_tools.newsmon_interest.list.newsmon.list"
newsmon_filter_rebuild.command = "/mute -core /filter addreplace ${my_list}_interest ${my_buffer} ${my_tags} *"
newsmon_filter_rebuild.conditions = ""
newsmon_filter_rebuild.enabled = on
newsmon_filter_rebuild.hook = config
newsmon_filter_rebuild.post_action = none
newsmon_filter_rebuild.regex = "/.*/${split:6,.,,${tg_option}}/my_list /.*/${raw:${${my_opt}_name},${${my_opt}_first_section},${${my_opt}_second_section},${${my_opt}_and_sections},${${my_opt}_name_start_with},${${my_opt}_first_section_start_with},${${my_opt}_second_section_start_with},${${my_opt}_and_sections_start_with},${${my_opt}_name_end_with},${${my_opt}_first_section_end_with},${${my_opt}_second_section_end_with},${${my_opt}_and_sections_end_with},${${my_opt}_name_contain},${${my_opt}_first_section_contain},${${my_opt}_second_section_contain},${${my_opt}_and_sections_contain},${${my_opt}_title},${${my_opt}_title_start_with},${${my_opt}_title_end_with},${${my_opt}_title_contain}}/my_options /.*/${my_options}/my_options2 /,/+/my_options2 /.*/${tg_value}/my_interests /[^,]+/${if:${re:0}=~^[abcdefghijklmnopqrstuvwxyz_]+$?${re:0}}/my_interests /,+/,/my_interests /^,|,$//my_interests /.*/${my_interests}/my_no_site_tags /([^,]+),?/${define:my_opt,plugins.var.group_tools.newsmon_interest.item.${re:1}.tags_no_site}${eval:${my_options}},/my_no_site_tags /,+/,/my_no_site_tags /^,|,$//my_no_site_tags /.*/${my_interests}/my_site_tags /([^,]+),?/${define:my_opt,plugins.var.group_tools.newsmon_interest.item.${re:1}.tags_site}${eval:${my_options2}}+/my_site_tags /[+]+/+/my_site_tags /^[+]|[+]$//my_site_tags /.*/${my_no_site_tags},${my_site_tags}/my_tags /^,|,$//my_tags /^$/!hide_everything/my_tags /.*/${if:${my_list}==newsmon?core.newsmon:${if:${plugins.var.group_tools.newsmon.all.general.buffer_full_name}!=?${plugins.var.group_tools.newsmon.all.general.buffer_full_name}:irc.libera.##news}}/my_buffer"
newsmon_filter_rebuild.return_code = ok
newsmon_item_rebuild.arguments = "plugins.var.group_tools.newsmon_interest.list.all_items.list;plugins.var.group_tools.newsmon_interest.list.newsmon.list"
newsmon_item_rebuild.command = "/mute -core /set plugins.var.group_tools.newsmon_interest.all.general.bar_item_base16_encoded_content '${my_item}';/item refresh newsmon_interest"
newsmon_item_rebuild.conditions = ""
newsmon_item_rebuild.enabled = on
newsmon_item_rebuild.hook = config
newsmon_item_rebuild.post_action = none
newsmon_item_rebuild.regex = "/.*/${plugins.var.group_tools.newsmon_interest.list.all_items.list}/my_content /[^,]+/${if:${re:0}=~^[abcdefghijklmnopqrstuvwxyz_]+$?${re:0}}/my_content /,+/,/my_content /^,|,$//my_content /([^,]+),?/${define:my_display,${plugins.var.group_tools.newsmon_interest.item.${re:1}.display}}${define:my_display,${if:${length:${my_display}}==?${re:1}:${my_display}}}${define:my_color,${if:,${plugins.var.group_tools.newsmon_interest.list.newsmon.list},=-,${re:1},?45:24}}${color:${my_color}}${color:darkgray,${my_color}}${cutscr:+5,…,${my_display}}${color:reset}${color:${my_color}}\n/my_content /.*/${base_encode:16,${my_content}}/my_item"
newsmon_item_rebuild.return_code = ok
newsmon_monitor.arguments = "irc.libera.##news;irc_privmsg,matrix_message,matrix_text,debug_newsmon"
newsmon_monitor.command = "/print -newbuffer ${my_monitor} -tags ${my_tags} \t${my_message}"
newsmon_monitor.conditions = "(${plugins.var.group_tools.newsmon.all.general.allow_filtered_lines} != || ${tg_displayed} !=) && ${tg_message_nocolor} =~ ^\[[^]|]+\] +[^ ].* +→ +https?://[^ ]+$"
newsmon_monitor.enabled = on
newsmon_monitor.hook = print
newsmon_monitor.post_action = none
newsmon_monitor.regex = "/.*/${info:news_parse,site_and_sections,${tg_message_nocolor}}/my_site_and_sections /.*/${split:1,|,,${my_site_and_sections}}/my_site /.*/${split:2,|,,${my_site_and_sections}}/my_first_section /.*/${split:3,|,,${my_site_and_sections}}/my_second_section /.*/${info:news_parse,title,${tg_message_nocolor}}/my_title /.*/${info:news_parse,url,${tg_message_nocolor}}/my_url /.*/${split:1,_,,${tg_trigger_name}}/my_monitor /.*/${plugins.var.group_tools.${my_monitor}.list.header.list}/my_list /[^,]+/${if:${re:0}=~^[abcdefghijklmnopqrstuvwxyz_]+$?${re:0}}/my_list /[^,]+/plugins.var.group_tools.${my_monitor}.item.${re:0}/my_list /[^,]+/${if:${length:${${re:0}.conditions}}==||${eval_cond:${${re:0}.conditions}}?${re:0}}/my_list /,+/,/my_list /^,|,$//my_list /.*/${my_list}/my_bgs /[^,]+/${base_encode:16,${eval:${${re:0}.bg}}}/my_bgs /$/,${base_encode:16,default}/my_bgs /([^,]+)(,|$)/${define:my_fg,${eval:${${re:1}.fg}}}${define:my_bg,${base_decode:16,${split:${re:repl_index},,,${my_bgs}}}}${define:my_separator,${eval:${${re:1}.separator}}}${define:my_min_length,${eval:${${re:1}.min_length}}}${define:my_max_length,${eval:${${re:1}.max_length}}}${define:my_content,${eval:${${re:1}.content}}}${define:my_next_bg,${base_decode:16,${split:${calc:${re:repl_index}+1},,,${my_bgs}}}}${color:${my_fg},${my_bg}} ${cutscr:+${if:${split:1,0,keep_eol+strip_left,${my_max_length}}!~^[1-9][0-9]*$?${calc:${lengthscr:${my_content}}+1}:${my_max_length}},…,${my_content}}${repeat:${calc:${my_min_length}-${lengthscr:${my_content}}}, }${color:${my_fg},${my_bg}} ${if:${plugins.var.group_tools.${my_monitor}.all.general.powerline}!=?${if:${color:${my_bg}}==${color:${my_next_bg}}?${color:${my_separator}}:${color:${my_bg},${my_next_bg}}${color:reset}}:${color:reset} }/my_list /.+/${re:0} /my_list /.*/${tg_tags}/my_tags / //my_tags /.*/${my_list}${my_title}${if:${plugins.var.group_tools.newsmon.all.general.keep_url}!=? → ${my_url}}/my_message"
newsmon_monitor.return_code = ok
newsmon_parse_tools.arguments = "news_parse"
newsmon_parse_tools.command = ""
newsmon_parse_tools.conditions = ""
newsmon_parse_tools.enabled = on
newsmon_parse_tools.hook = info
newsmon_parse_tools.post_action = none
newsmon_parse_tools.regex = "/.*/${split:1,,,${tg_arguments}}/my_var /.*/${split:2,,keep_eol,${tg_arguments}}/my_message /.*/${my_message}/my_site_and_sections /.*/${my_message}/my_title /^\[([^]]+)\].*/${re:1}/my_site_and_sections / - /|/my_site_and_sections /^\[[^]]+\] (.*)/${re:1}/my_title /.*/${split:-1, ,,${my_title}}/my_url / [^ ]+ [^ ]+$//my_title /.*/${my_${my_var}}/tg_info"
newsmon_parse_tools.return_code = ok
newsmon_tags_rebuild.arguments = "plugins.var.group_tools.newsmon_interest.item.*"
newsmon_tags_rebuild.command = "/set plugins.var.group_tools.newsmon_interest.item.${my_item}.tags_${my_option} '${my_tags}'"
newsmon_tags_rebuild.conditions = "${split:6,.,,${tg_option}} =~ ^[abcdefghijklmnopqrstuvwxyz_]+$ && ${split:7,.,,${tg_option}} =~ ^(no_)?site_(name|first_section|second_section|and_sections|title)(_start_with|_end_with|_contain)?$"
newsmon_tags_rebuild.enabled = on
newsmon_tags_rebuild.hook = config
newsmon_tags_rebuild.post_action = none
newsmon_tags_rebuild.regex = "/.*/${split:6,.,,${tg_option}}/my_item /.*/${split:7,.,,${tg_option}}/my_option /.*/${my_option}/my_tag_prefix /^no_//my_tag_prefix /_(contain|start_with|end_with)$//my_tag_prefix /.*/${lower:${tg_value}}/my_tags /[^|]+/${if:${my_option}=~(end_with|contain)$?*}${base_encode:16,${re:0}}${if:${my_option}=~(start_with|contain)$?*}/my_tags /\|+/|/my_tags /^\||\|$//my_tags /.+/${if:${my_option}!~^no_?!}${my_tag_prefix}_${re:0}/my_tags /\|/${if:${my_option}=~^no_?,:+!}${my_tag_prefix}_/my_tags"
newsmon_tags_rebuild.return_code = ok
server_pass.arguments = "5000|input_text_display;5000|history_add"
server_pass.command = ""
server_pass.conditions = ""
server_pass.enabled = on
server_pass.hook = modifier
server_pass.post_action = none
server_pass.regex = "s==^(/(server|connect) [^\n]*-(sasl_)?password=)([^ \n]+)([^\n]*)==${re:1}${hide:*,${re:4}}${re:5}"
server_pass.return_code = ok
sys_usage_item_rebuild.arguments = "1000;0;0"
sys_usage_item_rebuild.command = "/mute -core /set plugins.var.group_tools.sys_usage.all.general.bar_item_base16_encoded_content '${my_item}';/item refresh sys_usage"
sys_usage_item_rebuild.conditions = ""
sys_usage_item_rebuild.enabled = on
sys_usage_item_rebuild.hook = timer
sys_usage_item_rebuild.post_action = none
sys_usage_item_rebuild.regex = "/.*/${plugins.var.group_tools.sys_usage.list.sys_usage.list}/my_content /[^,]+/${if:${re:0}=~^[abcdefghijklmnopqrstuvwxyz0-9_]+$?${re:0}}/my_content /,+/,/my_content /^,|,$//my_content /([^,]+),?/${eval:${color:bar_delim}${plugins.var.group_tools.sys_usage.all.general.separator} ${color:reset}${plugins.var.group_tools.sys_usage.item.${re:1}.display} ${color:reset}${plugins.var.group_tools.sys_usage.item.${re:1}.content}}\n/my_content /.*/${base_encode:16,${my_content}}/my_item"
sys_usage_item_rebuild.return_code = ok
utils_search_server_buffer_ptr.arguments = "search_server_buffer_ptr"
utils_search_server_buffer_ptr.command = ""
utils_search_server_buffer_ptr.conditions = "${tg_arguments} != && (${buffer[${tg_arguments}].local_variables.script_name} =~ ^(matrix|slack)$ || ${buffer[${tg_arguments}].local_variables.plugin} =~ ^(irc|matrix))$"
utils_search_server_buffer_ptr.enabled = on
utils_search_server_buffer_ptr.hook = info
utils_search_server_buffer_ptr.post_action = none
utils_search_server_buffer_ptr.regex = "/.*/${buffer[${tg_arguments}].local_variables.plugin}/my_plugin /.*/${buffer[${tg_arguments}].local_variables.script_name}/my_script /.*/${buffer[${tg_arguments}].local_variables.server}/my_server /.*/${info:buffer,${if:${my_plugin}=~^(irc|matrix)$||${my_script}==matrix?${my_plugin}.server.${my_server}:${my_plugin}.${my_server}}}/tg_info"
utils_search_server_buffer_ptr.return_code = ok
